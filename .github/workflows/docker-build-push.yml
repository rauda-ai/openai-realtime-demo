name: Build and Push Docker Images

on:
  push:
    branches: [ "main" ]
    # Optionally add tags if you want to build on releases
    tags: [ 'v*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  WEBAPP_IMAGE_NAME: ${{ github.repository }}-webapp
  WEBSOCKET_IMAGE_NAME: ${{ github.repository }}-websocket

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Docker Buildx for better build performance and caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for the images
      - name: Extract Docker metadata for webapp
        id: meta-webapp
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.WEBAPP_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix=,format=short

      - name: Extract Docker metadata for websocket
        id: meta-websocket
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.WEBSOCKET_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix=,format=short

      # Build and push the webapp image
      - name: Build and push webapp image
        uses: docker/build-push-action@v5
        with:
          context: ./webapp
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-webapp.outputs.tags }}
          labels: ${{ steps.meta-webapp.outputs.labels }}
          # Use registry caching instead of GHA caching
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.WEBAPP_IMAGE_NAME }}:buildcache
          cache-to: ${{ github.event_name != 'pull_request' && format('type=registry,ref={0}/{1}:buildcache,mode=max', env.REGISTRY, env.WEBAPP_IMAGE_NAME) || '' }}

      # Build and push the websocket server image
      - name: Build and push websocket image
        uses: docker/build-push-action@v5
        with:
          context: ./websocket-server
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-websocket.outputs.tags }}
          labels: ${{ steps.meta-websocket.outputs.labels }}
          # Use registry caching instead of GHA caching
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.WEBSOCKET_IMAGE_NAME }}:buildcache
          cache-to: ${{ github.event_name != 'pull_request' && format('type=registry,ref={0}/{1}:buildcache,mode=max', env.REGISTRY, env.WEBSOCKET_IMAGE_NAME) || '' }}

      # Generate deployment artifacts
      - name: Generate deployment files
        run: |
          # Create a version of docker-compose that uses the built images
          cat > docker-compose.prod.yml << EOF
          services:
            websocket-server:
              image: ${{ env.REGISTRY }}/${{ env.WEBSOCKET_IMAGE_NAME }}:${GITHUB_SHA::7}
              env_file: 
                - ./.env
              environment:
                - PORT=8081
                - PUBLIC_URL=\${PUBLIC_URL:-https://realtime.sandbox.rauda.ai}
              restart: unless-stopped
              networks:
                - app-network
              healthcheck:
                test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/public-url"]
                interval: 10s
                timeout: 5s
                retries: 5

            webapp:
              image: ${{ env.REGISTRY }}/${{ env.WEBAPP_IMAGE_NAME }}:${GITHUB_SHA::7}
              env_file:
                - ./.env
              environment:
                - WEBSOCKET_SERVER_URL=http://websocket-server:8081
                - NEXT_PUBLIC_WEBSOCKET_SERVER_URL=\${PUBLIC_URL:-https://realtime.sandbox.rauda.ai}
              restart: unless-stopped
              networks:
                - app-network
              healthcheck:
                test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
                interval: 10s
                timeout: 5s
                retries: 5

            caddy:
              image: caddy:2
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./Caddyfile:/etc/caddy/Caddyfile
                - caddy_data:/data
                - caddy_config:/config
              networks:
                - app-network
              depends_on:
                webapp:
                  condition: service_healthy
                websocket-server:
                  condition: service_healthy

          networks:
            app-network:
              driver: bridge

          volumes:
            caddy_data:
            caddy_config:
          EOF

      # Upload docker-compose as an artifact
      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-files
          path: |
            docker-compose.prod.yml
            Caddyfile
            realtime-demo.service